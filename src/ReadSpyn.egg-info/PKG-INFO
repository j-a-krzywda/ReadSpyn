Metadata-Version: 2.4
Name: readspyn
Version: 2.0.0
Summary: JAX-based quantum dot readout simulator with efficient state scanning
Author-email: "Jan A. Krzywda" <j.a.krzywda@liacs.leidenuniv.nl>, "Rouven K. Koch" <R.K.Koch@tudelft.nl>
License: MIT
Project-URL: Homepage, https://github.com/jkrzywda/ReadSpyn
Project-URL: Repository, https://github.com/jkrzywda/ReadSpyn
Project-URL: Documentation, https://readspyn.readthedocs.io
Keywords: quantum,readout,simulation,jax,quantum-dots
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: jax>=0.4.0
Requires-Dist: jaxlib>=0.4.0
Requires-Dist: numpy>=1.21.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: scipy>=1.7.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"

# ReadSpyn 2.0 - JAX-based Quantum Dot Readout Simulator

<div align="center">
  <img src="https://raw.githubusercontent.com/google/jax/main/images/jax_logo_250px.png" alt="JAX Logo" width="200"/>
  
  [![PyPI version](https://badge.fury.io/py/readspyn.svg)](https://badge.fury.io/py/readspyn)
  [![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
  [![JAX](https://img.shields.io/badge/JAX-0.4.0+-orange.svg)](https://github.com/google/jax)
  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
  [![arXiv](https://img.shields.io/badge/arXiv-Quantum%20Computing-blue.svg)](https://arxiv.org/)
  [![DOI](https://img.shields.io/badge/DOI-10.5281%2Fzenodo.12345678-blue.svg)](https://doi.org/)
</div>

A high-performance simulator for quantum dot readout systems using JAX for efficient vectorized operations and state scanning.

## Key Features

- **JAX-based implementation** for GPU acceleration and efficient vectorization
- **Precomputed noise trajectories** for improved performance
- **State scanning** using JAX scan for efficient processing of multiple charge states
- **White noise post-processing** for flexible noise modeling
- **Multiple noise models** including Ornstein-Uhlenbeck and 1/f noise
- **RLC resonator sensors** with realistic circuit modeling

## Installation

```bash
pip install readspyn
```

For development installation:
```bash
git clone https://github.com/jkrzywda/ReadSpyn.git
cd ReadSpyn
pip install -e .
```

## Quick Start

```python
import jax
import jax.numpy as jnp
from readout_simulator import (
    QuantumDotSystem, 
    RLC_sensor, 
    JAXReadoutSimulator,
    OU_noise, 
    OverFNoise
)

# Define quantum dot system
Cdd = jnp.array([[1, 0], [0, 1]])  # 2x2 dot-dot capacitance matrix
Cds = jnp.array([[1], [0.1]]) * 0.6  # 2x1 dot-sensor coupling matrix
dot_system = QuantumDotSystem(Cdd, Cds)

# Configure sensor
params_resonator = {
    'Lc': 800e-9,
    'Cp': 0.5e-12,
    'RL': 40,
    'Rc': 100e6,
    'Z0': 50
}

params_coulomb_peak = {
    'g0': 1/50/1e6,
    'eps0': 0.5,
    'eps_width': 1
}

# Create noise model and sensor
eps_noise = OverFNoise(n_fluctuators=3, S1=1e-6, sigma_couplings=0.1,
                       ommax=1e6, ommin=1e3, equally_dist=True)
c_noise = OU_noise(sigma=1e-12, gamma=1e5)
sensor = RLC_sensor(params_resonator, params_coulomb_peak, c_noise, eps_noise)

# Create simulator
simulator = JAXReadoutSimulator(dot_system, [sensor])

# Define simulation parameters
t_end = 1000 * sensor.T0
dt = 0.5e-9
times = jnp.arange(0, t_end, dt)
charge_states = jnp.array([[1, 0], [0, 1], [1, 1]])

# Precompute noise trajectories
key = jax.random.PRNGKey(42)
simulator.precompute_noise(key, times, n_realizations=50, noise_model=eps_noise)

# Run simulation
params = {'SNR_white': 10, 'eps0': 0.5}
results = simulator.run_simulation(charge_states, times, params, key)

# Analyze results
I_integrated, Q_integrated = simulator.get_integrated_IQ(sensor_idx=0)
fidelity = simulator.calculate_fidelity(sensor_idx=0)
print(f"Readout fidelity: {fidelity:.3f}")
```

## Architecture

### Core Components

1. **QuantumDotSystem**: Represents the quantum dot system with capacitance matrices
2. **RLC_sensor**: Models RLC resonator sensors with realistic circuit behavior
3. **JAXReadoutSimulator**: Main simulator using JAX for efficient computation
4. **Noise Models**: JAX-compatible noise generators (OU_noise, OverFNoise)

### Key Innovations

- **Precomputed Noise**: Noise trajectories are generated once and reused across all states
- **State Scanning**: Uses JAX scan to efficiently process multiple charge states
- **Vectorized Operations**: All computations are vectorized for GPU acceleration
- **Post-processing Noise**: White noise is added after signal generation for flexibility

## Performance

The JAX-based implementation provides significant performance improvements:

- **GPU acceleration** support through JAX
- **Vectorized state processing** using JAX scan
- **Precomputed noise trajectories** eliminate redundant calculations
- **Efficient memory usage** through JAX's functional programming model

## Examples

See the `examples/` directory for detailed usage examples:

- `jax_example.ipynb`: Basic JAX-based simulation example
- Additional examples demonstrating advanced features

## Dependencies

- JAX >= 0.4.0
- NumPy >= 1.21.0
- Matplotlib >= 3.5.0
- SciPy >= 1.7.0

## Contributing

Contributions are welcome! Please feel free to submit pull requests or open issues.

## License

This project is licensed under the MIT License.

## Citation

If you use ReadSpyn in your research, please cite:

```bibtex
@software{readspyn2024,
  title={ReadSpyn: JAX-based Quantum Dot Readout Simulator},
  author={Krzywda, Jan A.},
  year={2024},
  url={https://github.com/jkrzywda/ReadSpyn}
}
```

## Contact

- Author: Jan A. Krzywda, Rouven K. Koch
- Email: j.a.krzywda@liacs.leidenuniv.nl
- GitHub: https://github.com/jkrzywda/ReadSpyn 
